<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Top_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Concepts|Overview">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Test Units</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.next-topic-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.previous-topic-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.filler-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.expand-all-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/expand.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.collapse-all-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/collapse.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div>
                        <nav class="title-bar tab-bar" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="relative clearfix"><a class="logo" href="../Home.htm" alt="Logo"></a>
                                    <div class="navigation-wrapper nocontent">
                                        <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                            <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                            </li>
                                        </ul>
                                    </div>
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="nav-search row outer-row">
                                <form class="search" action="#">
                                    <div class="search-bar search-bar-container needs-pie">
                                        <input class="search-field needs-pie" type="search" placeholder="Search" />
                                        <div class="search-filter-wrapper">
                                            <div class="search-filter">
                                                <div class="search-filter-content">
                                                    <ul>
                                                        <li>All Files</li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="search-submit-wrapper" dir="ltr">
                                            <div class="search-submit" title="Search">
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row" data-mc-content-body="True">
                            <div class="content">
                                <div id="contentBody">
                                    <div class="row collapse">
                                        <div class="sideContent">
                                            <div class="clearfix">
                                                <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                    <div class="button-group-container-left">
                                                        <button class="button needs-pie next-topic-button" title="Navigate next">
                                                            <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                                                        </button>
                                                        <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                            <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                                                        </button>
                                                    </div>
                                                    <div class="button-group-container-right">
                                                        <div class="button-separator">
                                                        </div>
                                                        <button class="button needs-pie print-button" title="Print">
                                                            <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                        </button>
                                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                                            <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="expand all" />
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                            <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/Online_Output.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                            </ul>
                                        </div>
                                        <div class="nocontent">
                                            <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                            </div>
                                        </div>
                                        <h1>Test Units</h1>
                                        <h2>Introduction</h2>
                                        <p>This section introduces the <span class="GeneralProductName">Eyes</span> notion of a "<i>test</i>" that is a unit of comparison that consists of multiple "<i>steps</i>".</p>
                                        <p>A test suite will typically test the application at a multiple checkpoints. Each <a href="javascript:void(0);" class="MCTextPopup MCTextPopupHotSpot MCTextPopup_Open glossaryTerm MCTextPopupHotSpot_" alt="Closed" data-mc-alt2="Open">checkpoint<span class="MCTextPopupBody popupBody"><span class="MCTextPopupArrow"></span>A state of the application UI at which the screen image is grabbed and compared to a baseline image that corresponds to the check point</span></a> represents a state of the system UI. The test program triggers a series of events to bring the system into each required state. It then calls the <span class="GeneralProductClientAPI">Eyes SDK</span> to capture a screen image and sends it to the <span class="DefinitionsEyes Server">Eyes Server</span> for match processing. (On some platforms the test program captures the image and passes it to the <span class="GeneralProductClientAPI">Eyes SDK</span>). The <span class="DefinitionsEyes Server">Eyes Server</span> then compares the captured <i>actual image</i> to a corresponding baseline <i>expected image</i> and detects any mismatches. </p>
                                        <p>In order to do automatic visual testing of multiple checkpoints, there is a need for:</p>
                                        <ul>
                                            <li value="1">A baseline image for every checkpoint</li>
                                            <li value="2">A way to associate an image taken at a given checkpoint to it's corresponding baseline image</li>
                                        </ul>
                                        <p>There are many possibilities as to how checkpoints can be mapped to baseline images. Before explaining the method used by <span class="GeneralProductName">Eyes</span> let's look at a simple alternative so as to understand better the mechanism used by <span class="GeneralProductName">Eyes</span>.</p>
                                        <p> One way to implement baseline images is to assign a unique identifier (ID)&#160;to every checkpoint. When a test is executed and there is no baseline image for that checkpoint ID, then that image is stored and marked as the  baseline image for that checkpoint. If a baseline exists that corresponds to the checkpoint ID&#160;then the captured image is compared to that baseline image. </p>
                                        <p>This approach is simple, however in an advanced testing environment it can be difficult to manage. The problem is that as software changes the set of checkpoints also changes:</p>
                                        <ul>
                                            <li value="1">New checkpoints may be added, to correspond to new functionality</li>
                                            <li value="2">Existing checkpoints may become obsolete and need to be removed. </li>
                                            <li value="3">The screen content at an existing checkpoint may change, for example, because of a new field in a form or a new menu entry. In this case a mismatch will be detected - but it is not due to a bug, but rather the checkpoint baseline image needs to be updated. </li>
                                        </ul>
                                        <p>With the simplistic approach outlined above the test programer would need to:</p>
                                        <ul>
                                            <li value="1">Ensure that every checkpoint has a unique ID</li>
                                            <li value="2">Manage the creation of new baseline images for new checkpoints</li>
                                            <li value="3">Manage removal of baseline images that are no longer related to an existing checkpoint</li>
                                        </ul>
                                        <p>Instead of this mechanism, <span class="GeneralProductName">Eyes</span> provides the notion of a testing unit (called simply "a <i>test</i>") that consists of a set of multiple <i>expected images</i> that are associated together, under a single baseline name, each such image corresponds to a "step" in the test.</p>
                                        <h2> "Test" and Steps</h2>
                                        <p>When a test is run, <span class="GeneralProductName">Eyes</span> stores the list of the <i>actual images</i> captured during the run, in the order that they are captured. It compares this list to the list of <i>expected images</i> stored as part of the test baseline information. In an actual run, the numbered of captured images may be more or less than the number of expected images. But if the order of images that <i>are</i> in both list is assumed to be the same, then <span class="GeneralProductName">Eyes</span> can detect the following cases:</p>
                                        <ul>
                                            <li value="1">A)&#160;The expected and actual image of a step match.</li>
                                            <li value="2">B)&#160;The expected and actual image of a step differ</li>
                                            <li value="3">C)&#160;There is an expected image with no corresponding actual image </li>
                                            <li value="4">D)&#160;There is an actual image with no corresponding expected image </li>
                                        </ul>
                                        <p>By default <span class="GeneralProductName">Eyes</span> only notifies what is has found - one of the four state above. It makes no decision as to the cause of the mismatch. The mismatch may signal a bug in the application or a bug in the test, or it may be due to a real change in the application or test.The tester can now use the <span class="GeneralProductUI">Eyes Web Application</span>   to view the actual and expected images for each step, and decide if the mismatch is due to a bug or a change. As a result of this the tester can report the bugs, and by implication can indicate what should be done regarding the baseline images for each step of the test: </p>
                                        <ul>
                                            <li value="1">the baseline image should remain (case A and B&#160;where the mismatch is due to a bug in the test or the application)</li>
                                            <li value="2">the baseline image should be deleted (case C is expected and not due to a bug)</li>
                                            <li value="3">the baseline image should  be replaced by the image captured in the test run (case B&#160;where the mismatch was because of a change in the application)</li>
                                            <li value="4">the newly captured image should be stored as the new baseline image  (case D where a new step was introduced in the test)</li>
                                        </ul>
                                        <h2>Example</h2>
                                        <p>The following section is a detailed example that illustrates the logic described above.</p>
                                        <p>The test uses as an example a simple use case where the user presses a "contact" button and is presented with a form in which he should fill out his name and e-mail.</p>
                                        <p>For simplicity the figures shown the information available in the output and not the actual screen shot output.</p>
                                        <h3>Test Version 1, first run.</h3>
                                        <p>In the first version of the test, illustrated in the figure below, the user presses a "contact button", enters his name but not an e-mail address and then the application displays a "thank you" Popup.<span class="GeneralProductName">Eyes</span> is called three times, after the contact form has been shown, after the user has pressed OK, before the form is closed, and after the "thank you" popup has been displayed.<span class="GeneralProductName">Eyes</span>. The figure shows that <span class="GeneralProductName">Eyes</span> has three actual images, no baseline images and has therefor concluded that this are three new steps. </p>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" /><p> See figure </p></a></span>
                                            <div class="MCDropDownBody dropDownBody">
                                                <p>
                                                    <img src="../Resources/Figures/F0002a.png" />)</p>
                                            </div>
                                        </div>
                                        <p>The following figure shows the state of the baseline after the user has confirmed that these images are the correct result.</p>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" /><p>See figure</p></a></span>
                                            <div class="MCDropDownBody dropDownBody">
                                                <p> <img src="../Resources/Figures/F0002b.png" /> </p>
                                            </div>
                                        </div>
                                        <p>The product owner decides to makes some changes</p>
                                        <ol>
                                            <li value="1">The application should check if the user has entered an e-mail - and if not then warn him and request that he add an email. </li>
                                            <li value="2">A&#160;cancel button should be added to the form</li>
                                            <li value="3">There is no need for the "thank you popup"</li>
                                        </ol>
                                        <p>The following figure shows the new test program and the state of the actual and expected images immediately after the test run before the tester has confirmed the results (we've put the code lines removed in comment in case the product owner changes his mind :-) ), .</p>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" /><p>See figure</p></a></span>
                                            <div class="MCDropDownBody dropDownBody">
                                                <p>
                                                    <img src="../Resources/Figures/F0002c.png" />
                                                </p>
                                            </div>
                                        </div>
                                        <p>Notice that <span class="GeneralProductName">Eyes</span> has detected that</p>
                                        <ul>
                                            <li value="1">two changes in the empty form (cancel has been added and OK&#160;has moved to the right)</li>
                                            <li value="2">three changes in the filled out form (as above and in addition  the name was changed from John Doe to John Buck</li>
                                            <li value="3">a new "email missing" dialog</li>
                                            <li value="4">a&#160;new filled out form with the e-mail</li>
                                            <li value="5">a missing thank you dialog</li>
                                            <li value="6">a new home page dialog after the form has been closed</li>
                                        </ul>
                                        <p>The test manager accepts all the changes accept that she wants the email name to be John Doe, so she rejects that change and so after the next run the state of the system is as follows:</p>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" /><p>See figure</p></a></span>
                                            <div class="MCDropDownBody dropDownBody">
                                                <p>
                                                    <img src="../Resources/Figures/F0002d.png" />
                                                </p>
                                            </div>
                                        </div>
                                        <p>and after the tester accepts the form with the e-maill the baseline looks like</p>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" /><p>See figure</p></a></span>
                                            <div class="MCDropDownBody dropDownBody">
                                                <p>
                                                    <img src="../Resources/Figures/F0002e.png" />
                                                </p>
                                            </div>
                                        </div>
                                        <h2>Using Test Sequences </h2>
                                        <p><span class="GeneralProductName">Eyes</span> associates a baseline with every test sequence instead of every checkpoint. The baseline has a unique ID. The ID&#160;is composed of  application and test name provided by the programer as well as other attributes that make the test unique such as the viewport size, the operating system and the application platform. See <a href="../A2_Concepts/D_Managing tests and Results/B1_Baselines.htm" class="MCXref xref" xrefformat="{para}">Baselines</a> for full details.</p>
                                        <p>If the test programmer prefers to have a unique ID&#160;for every checkpoint then this is achieved by assigning a test sequence with a single image for every check point</p>
                                        <h2>Test Sequence Example Pattern</h2>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />The following outlines how a code sequence is coded in Java other languages are similar:</a></span>
                                            <div class="MCDropDownBody dropDownBody">
                                                <ol>
                                                    <li value="1">A test context is created and setup (not shown)</li><pre class="code-block">eyes = new Eyes();</pre>
                                                    <li value="2">The  test sequence is created</li><pre xml:space="preserve">eyes.open(applicationName, testName, ViewportSize);</pre>
                                                    <li value="3">a series of call are made that setup the state for the checkpoint (e.g. by calling Selenium) and then calling a "check" method to initiate the capture of the image</li>
                                                </ol><pre xml:space="preserve">
   <i>set up first checkpoint..</i>
   eyes.checkWindow(); // no tag given
   <i>set up second checkpoint..</i>
   eyes.checkWindow("optional Tag");</pre>
                                                <ul>
                                                    <li value="1">At the end of the run the test calls</li><pre xml:space="preserve">result = eyes.close();</pre>
                                                </ul>
                                            </div>
                                        </div>
                                        <h2>Notes</h2>
                                        <ol>
                                            <li value="1">Multiple test sequences may be grouped together for the purpose of viewing results. See <a href="../A2_Concepts/D_Managing tests and Results/A_Batches.htm" class="MCXref xref" xrefformat="{para}">Batches</a>.</li>
                                            <li value="2">In a production environment, the software that is related to a test sequence undergoes changes and multiple versions of the software may exists at the same time. <span class="GeneralProductName">Eyes</span> Provides a way to manage multiple versions of a test sequence that parallel the multiple versions of the software that the test sequence is capturing.</li>
                                            <li value="3">&#160;</li>
                                        </ol>
                                        <h2>See Also</h2>
                                        <p class="internal">open,close,check,test commands</p>
                                        <p class="internal">Types of check points</p>
                                        <p class="internal">Baselines</p>
                                        <p class="internal">Branches</p>
                                        <p class="internal">&#160;</p>
                                        <div class="internal">Purpose</div>
                                        <div class="internal">Notes</div>
                                        <ol>
                                            <div class="internal">note 1</div>
                                        </ol>
                                        <div class="internal">Status : NOT-STARTED</div>
                                        <div class="internal">Reviewed : NOT-REVIEWED</div>
                                        <p>&#160;</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>